#+TITLE: Проект
* Результаты
| файл                      | описание    |
|---------------------------+-------------|
| ./src/init-definitions.wl | определения |
| ./src/init-paths.wl       | пути        |
| ./run/result.wl           | результат   |
* Настройки
	:PROPERTIES:
  :eval:     noexport
	:exports:  code
	:results:  none
	:mkdirp:   yes
	:dir:      ./src
	:comments: no
	:eval:     no
	:END:
** Определения и обозначения
#+begin_src wl :tangle ./src/init-definitions.wl
x = 1;
#+end_src

** Пути
#+begin_src wl :tangle ./src/init-paths.wl
path`run = "run"
fname`result = FileNameJoin[{path`run, "result.wl"}]
#+end_src
* Вычисления
	:PROPERTIES:
  :eval:     noexport
	:exports:  code
	:results:  none
	:mkdirp:   yes
	:dir:      ./src
	:comments: no
	:eval:     no
	:shebang: "#!/usr/bin/env wolfram_script.sh"
	:END:

** Инициализация скриптов
#+begin_src wl :tangle ./src/init.wl
Needs["RG`Tools`"];
Get[FileNameJoin@{"src", "init-definitions.wl"}];
Get[FileNameJoin@{"src", "init-paths.wl"}];

note[path`run, ExpandFileName];
#+end_src

** Создание директорий
#+begin_src wl :tangle ./src/make-directories.wl
Needs["RG`Tools`"];
Get["src`"];

paths = Sort[ToExpression/@Names["path`*"]];

llog["making directories",
  Scan[
    If[Not@FileExistsQ[#], 
      CreateDirectory[#], 
      log[StringForm["`` already exist", #], prefix->"\n[....]: ", endl->" ... "]
    ]&, 
    paths
  ];
];
Write["stdout", paths // StringReplace[{path`run~~x__ :> "."~~x}]];

exit[0];
#+end_src

** Скрипт
#+begin_src wl :tangle ./src/script.wl
Get["src`"];

result = x + 3;
llog["saving results", Put[result, fname`result]];

exit[0];
#+end_src

* Тесты
	:PROPERTIES:
  :eval:     noexport
	:exports:  code
	:results:  none
	:mkdirp:   yes
	:comments: no
	:eval:     no
	:shebang: "#!/usr/bin/env wolfram_script.sh"
	:END:
#+begin_src wl :tangle ./tests/test.wl
Get[FileNameJoin[{"src", "init.wl"}]];
On[Assert];
result = Get[fname`result];
check[result == 4];
check[x == 2];
exit[0];
#+end_src

* Makefile
#+begin_src makefile :tangle ./Makefile
.PHONY: check all clean wipe tar run diff tests

project=project
scripts=./src/init.wl ./src/script.wl
inits=./src/init-definitions.wl ./src/init-paths.wl
external=

archive_name=./data/${project}
archive_content=./src/init-definitions.wl ./src/init-paths.wl ./run/*

all: ./run.log

run: check
	wolfram -script ./src/script.wl

clean:
	-find ./run -type f -exec rm -v {} \;

wipe: clean
	-find ./src -type f -exec rm -v {} \;

check: ${scripts} ${inits}
	wolfram -script RG/SyntaxChecker/check.wl $^

./run.log: ${scripts} ${inits} ${external}
	make clean
	make run 2>&1 | tee ./run.log
	cat ./run.log | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g" >./run/run.txt

tests: all
	wolfram -script ./tests/test.wl

diff:
	-tar --diff -f ${archive_name}.tar .

tar: ${archive_name}.tar

${archive_name}.tar: ${archive_content} ./run.log
	-[[ -f ${archive_name}.tar ]] && (printf "[warning]: '${archive_name}.tar' does exists ... \n" \
		&& gzip --stdout ${archive_name}.tar >"${archive_name}-`date +%Y-%m-%d_%H%M%S`.tar.gz")

	tar --create -f ${archive_name}.tar ${archive_content}
#+end_src
